{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","state","term","location","sortBy","sortByOptions","getSortByClass","bind","handleTermChange","handleLocationChange","handleSearch","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","entries","console","log","onClick","handleSortByChange","renderSortByOptions","placeholder","onChange","Yelp","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.968d46da.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Business.css\";\r\n\r\nclass Business extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Business\">\r\n        <div className=\"image-container\">\r\n          <img\r\n            src={this.props.business.imageSrc}\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <h2>{this.props.business.name}</h2>\r\n        <div className=\"Business-information\">\r\n          <div className=\"Business-address\">\r\n            <p>{this.props.business.address}</p>\r\n            <p>{this.props.business.city}</p>\r\n            <p>{this.props.business.zipCode}</p>\r\n          </div>\r\n          <div className=\"Business-reviews\">\r\n            <h3>{this.props.business.category}</h3>\r\n            <h3 className=\"rating\">{this.props.business.rating} stars</h3>\r\n            <p>{this.props.business.reviewCount} reviews</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Business;\r\n","import React from \"react\";\r\nimport \"./BusinessList.css\";\r\nimport Business from \"../Business/Business\";\r\n\r\nclass BusinessList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"BusinessList\">\r\n        {this.props.businesses.map((business) => {\r\n          return <Business business={business} key={business.id} />;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BusinessList;\r\n","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: \"\",\r\n      location: \"\",\r\n      sortBy: \"best_match\",\r\n    };\r\n    this.sortByOptions = {\r\n      \"Best Match\": \"best_match\",\r\n      \"Highest Rated\": \"rating\",\r\n      \"Most Reviewed\": \"review_count\",\r\n    };\r\n    this.getSortByClass = this.getSortByClass.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleLocationChange = this.handleLocationChange.bind(this);\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n  }\r\n\r\n  getSortByClass(sortByOption) {\r\n    if (this.state.sortBy === sortByOption) {\r\n      return \"active\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  handleSortByChange(sortByOption) {\r\n    this.setState({\r\n      sortBy: sortByOption,\r\n    });\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({\r\n      term: event.target.value,\r\n    });\r\n  }\r\n\r\n  handleLocationChange(event) {\r\n    this.setState({\r\n      location: event.target.value,\r\n    });\r\n  }\r\n\r\n  handleSearch(event) {\r\n    this.props.searchYelp(\r\n      this.state.term,\r\n      this.state.location,\r\n      this.state.sortBy\r\n    );\r\n    event.preventDefault();\r\n  }\r\n\r\n  renderSortByOptions() {\r\n    return Object.entries(this.sortByOptions).map(([key, value]) => {\r\n      console.log (`${key}`);\r\n      return (\r\n        <li\r\n          key={value}\r\n          className={this.getSortByClass(value)}\r\n          onClick={this.handleSortByChange.bind(this, value)}\r\n        >\r\n          {key}\r\n        </li>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <div className=\"SearchBar-sort-options\">\r\n          <ul>{this.renderSortByOptions()}</ul>\r\n        </div>\r\n        <div className=\"SearchBar-fields\">\r\n          <input\r\n            placeholder=\"Search Businesses\"\r\n            onChange={this.handleTermChange}\r\n          />\r\n          <input placeholder=\"Where?\" onChange={this.handleLocationChange} />\r\n        </div>\r\n        <div className=\"SearchBar-submit\">\r\n          <a onClick={this.handleSearch}>Let's Go</a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","const apiKey =\r\n  \"Kqnx7dzynVsFI1L8txqLhqGmWkQdCSjnWxuXZBOsAeuMBfg10ODYdcF4vAirlpODox5ZCIERKHNq-v1pTrKb_mQpbVbYla7ADI2TSaXmFA2lSh53sKUGsgeXwkuHX3Yx\";\r\n\r\nconst Yelp = {\r\n  search(term, location, sortBy) {\r\n    return fetch(\r\n      `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${apiKey}`,\r\n        },\r\n      }\r\n    )\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((jsonResponse) => {\r\n        if (jsonResponse.businesses) {\r\n          return jsonResponse.businesses.map((business) => {\r\n            return {\r\n              id: business.id,\r\n              imageSrc: business.image_url,\r\n              name: business.name,\r\n              address: business.location.address1,\r\n              city: business.location.city,\r\n              state: business.location.state,\r\n              zipCode: business.location.zip_code,\r\n              category: business.categories[0].title,\r\n              rating: business.rating,\r\n              reviewCount: business.review_count,\r\n            };\r\n          });\r\n        }\r\n      });\r\n  },\r\n};\r\n\r\nexport { Yelp };\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport BusinessList from \"../BusinessList/BusinessList\";\r\nimport SearchBar from \"../SearchBar/SearchBar\";\r\nimport { Yelp } from \"../../util/Yelp\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { businesses: [] };\r\n    this.searchYelp = this.searchYelp.bind(this);\r\n  }\r\n\r\n  searchYelp(term, location, sortBy) {\r\n    Yelp.search(term, location, sortBy).then((businesses) => {\r\n      this.setState({ businesses: businesses });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>ravenous</h1>\r\n        <SearchBar searchYelp={this.searchYelp} />\r\n        <BusinessList businesses={this.state.businesses} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}